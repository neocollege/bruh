#include <stdbool.h>
#include <stdio.h>



int printSolution(int N, int board[N][N])
{
for (int i = 0; i < N; i++)
{
for (int j = 0; j < N; j++)
if (board[i][j] == 0)
printf(" - ");
else
printf(" Q ");
printf("\n");
}
return 0;
}
bool isSafe(int N, int board[N][N], int row, int col)
{
int i, j;
// left row
for (i = 0; i < col; i++)
if (board[row][i])
return false;
// upper diagonal
for (i = row, j = col; i >= 0 && j >= 0; i--, j--)
if (board[i][j])
return false;
// lower diagonal
for (i = row, j = col; j >= 0 && i < N; i++, j--)



if (board[i][j])
return false;



return true;
}



bool solveNQUtil(int N, int board[N][N], int col)
{
if (col >= N)
return true;
for (int i = 0; i < N; i++)
{
if (isSafe(N, board, i, col))
{
board[i][col] = 1;



if (solveNQUtil(N, board, col + 1))
{
printSolution(N, board);
printf("\n");
}
board[i][col] = 0;
}
}



return false;
}



bool solveNQ(int N)
{
int board[N][N], i, j;



for (i = 0; i < N; i++)
{
for (j = 0; j < N; j++)
{
board[i][j] = 0;
}
}



if (solveNQUtil(N, board, 0) == false)
{
printf("there are no more solutions\n");
return false;
}
return true;
}



int main()
{
int N;
printf("Enter number of queens: ");
scanf("%d", &N);
solveNQ(N);
return 0;
}