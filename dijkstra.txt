#include <stdio.h> 
#include <conio.h> 
#define INFINITY 9999 
#define MAX 10 
void dijkstra(int input[MAX][MAX], int n, int source); 
int main() 
{ 
int input[MAX][MAX], i, j, n, u; 
printf("Enter no. of vertices:"); 
scanf("%d", &n); 
printf("\nEnter the adjacency matrix:\n"); 
for (i = 0; i < n; i++) 
for (j = 0; j < n; j++) 
scanf("%d", &input[i][j]); 
printf("\nEnter the starting node:"); 
scanf("%d", &u); 
dijkstra(input, n, u); 
return 0; 
} 
void dijkstra(int input[MAX][MAX], int n, int source) 
{ 
int cost[MAX][MAX], distance[MAX], pred[MAX]; 
int visited[MAX], count, mindistance, nextnode, i, j; 
for (i = 0; i < n; i++) 
for (j = 0; j < n; j++) 
if (input[i][j] == 0) 
cost[i][j] = INFINITY; 
else 
cost[i][j] = input[i][j]; 
for (i = 0; i < n; i++) 
{ 
distance[i] = cost[source][i]; 
pred[i] = source; 
visited[i] = 0; 
} 
distance[source] = 0; 
visited[source] = 1; 
count = 1; 
while (count < n - 1) 
{ 
mindistance = INFINITY; 
for (i = 0; i < n; i++) 
if (distance[i] < mindistance && !visited[i]) 
{ 
mindistance = distance[i]; 
nextnode = i; 
} 
visited[nextnode] = 1; 
for (i = 0; i < n; i++) 
if (!visited[i]) 
if (mindistance + cost[nextnode][i] < distance[i]) 
{ 
distance[i] = mindistance + cost[nextnode][i]; 
pred[i] = nextnode; 
} 
count++; 
} 
for (i = 0; i < n; i++) 
if (i != source) 
{ 
printf("\nDistance of node%d=%d", i, distance[i]); 
printf("\nPath=%d", i); 
j = i; 
do 
{ 
j = pred[j]; 
printf("<-%d", j); 
} while (j != source); 
} 
} 
